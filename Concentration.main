class Concentration{
    
    private(set) var cards = [Card]()
    
    private var indexOfFirstFaceUpCard: Int? {
        get {
            var foundIndex: Int?
            for index in cards.indices {
                if cards[index].isFaceUp {
                    if foundIndex == nil {
                        foundIndex = index
                    }
                    else{
                        return nil
                    }
                }
            }
            return foundIndex
        }
        set{
            for index in cards.indices {
                cards[index].isFaceUp = (index == newValue)
            }
        }
    }
    
    func chooseCard(at index: Int) {
        assert(cards.indices.contains(index), "Concentration.chooseCard(at: \(index)): chosen index is not in the cards")
        if !cards[index].isMatched {
            if let matchIndex = indexOfFirstFaceUpCard, matchIndex != index {
                if cards[matchIndex].identifier == cards[index].identifier {
                    cards[matchIndex].isMatched = true
                    cards[index].isMatched = true
                }
                cards[index].isFaceUp = true
            }
            else {
                indexOfFirstFaceUpCard = index
            }
        }
    }
    
    init (numberOfPairsOfCards: Int) {
        assert(numberOfPairsOfCards > 0, "Concentration.init(\(numberOfPairsOfCards)): must have at least one pair of cards")
        
        for _ in 0..<numberOfPairsOfCards {
            
            let card = Card()
            cards += [card, card]
            
        }
        
        for toSwap in 0 ..< cards.count {
            let randomSwitch = Int(arc4random_uniform(UInt32(cards.count - 1)))
            swap(swapee: toSwap, destination: randomSwitch)
        }
    }
    
    func swap (swapee: Int, destination: Int) {
        let temp = cards[swapee]
        cards[swapee] = cards[destination]
        cards[destination] = temp
    }
    
}
